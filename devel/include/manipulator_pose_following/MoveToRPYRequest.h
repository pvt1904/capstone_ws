// Generated by gencpp from file manipulator_pose_following/MoveToRPYRequest.msg
// DO NOT EDIT!


#ifndef MANIPULATOR_POSE_FOLLOWING_MESSAGE_MOVETORPYREQUEST_H
#define MANIPULATOR_POSE_FOLLOWING_MESSAGE_MOVETORPYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manipulator_pose_following
{
template <class ContainerAllocator>
struct MoveToRPYRequest_
{
  typedef MoveToRPYRequest_<ContainerAllocator> Type;

  MoveToRPYRequest_()
    : pose_rpy()
    , max_vel_fact(0.0)
    , max_acc_fact(0.0)  {
    }
  MoveToRPYRequest_(const ContainerAllocator& _alloc)
    : pose_rpy(_alloc)
    , max_vel_fact(0.0)
    , max_acc_fact(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pose_rpy_type;
  _pose_rpy_type pose_rpy;

   typedef float _max_vel_fact_type;
  _max_vel_fact_type max_vel_fact;

   typedef float _max_acc_fact_type;
  _max_acc_fact_type max_acc_fact;





  typedef boost::shared_ptr< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToRPYRequest_

typedef ::manipulator_pose_following::MoveToRPYRequest_<std::allocator<void> > MoveToRPYRequest;

typedef boost::shared_ptr< ::manipulator_pose_following::MoveToRPYRequest > MoveToRPYRequestPtr;
typedef boost::shared_ptr< ::manipulator_pose_following::MoveToRPYRequest const> MoveToRPYRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator1> & lhs, const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose_rpy == rhs.pose_rpy &&
    lhs.max_vel_fact == rhs.max_vel_fact &&
    lhs.max_acc_fact == rhs.max_acc_fact;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator1> & lhs, const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manipulator_pose_following

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f636de656604161ed176afacc17ebd31";
  }

  static const char* value(const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf636de656604161eULL;
  static const uint64_t static_value2 = 0xd176afacc17ebd31ULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulator_pose_following/MoveToRPYRequest";
  }

  static const char* value(const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pose_rpy\n"
"float32   max_vel_fact\n"
"float32   max_acc_fact\n"
;
  }

  static const char* value(const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_rpy);
      stream.next(m.max_vel_fact);
      stream.next(m.max_acc_fact);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToRPYRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulator_pose_following::MoveToRPYRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose_rpy[]" << std::endl;
    for (size_t i = 0; i < v.pose_rpy.size(); ++i)
    {
      s << indent << "  pose_rpy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_rpy[i]);
    }
    s << indent << "max_vel_fact: ";
    Printer<float>::stream(s, indent + "  ", v.max_vel_fact);
    s << indent << "max_acc_fact: ";
    Printer<float>::stream(s, indent + "  ", v.max_acc_fact);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATOR_POSE_FOLLOWING_MESSAGE_MOVETORPYREQUEST_H

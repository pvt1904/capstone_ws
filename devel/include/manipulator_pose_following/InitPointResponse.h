// Generated by gencpp from file manipulator_pose_following/InitPointResponse.msg
// DO NOT EDIT!


#ifndef MANIPULATOR_POSE_FOLLOWING_MESSAGE_INITPOINTRESPONSE_H
#define MANIPULATOR_POSE_FOLLOWING_MESSAGE_INITPOINTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manipulator_pose_following
{
template <class ContainerAllocator>
struct InitPointResponse_
{
  typedef InitPointResponse_<ContainerAllocator> Type;

  InitPointResponse_()
    : transfer_state(0)  {
    }
  InitPointResponse_(const ContainerAllocator& _alloc)
    : transfer_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _transfer_state_type;
  _transfer_state_type transfer_state;





  typedef boost::shared_ptr< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct InitPointResponse_

typedef ::manipulator_pose_following::InitPointResponse_<std::allocator<void> > InitPointResponse;

typedef boost::shared_ptr< ::manipulator_pose_following::InitPointResponse > InitPointResponsePtr;
typedef boost::shared_ptr< ::manipulator_pose_following::InitPointResponse const> InitPointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator1> & lhs, const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.transfer_state == rhs.transfer_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator1> & lhs, const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manipulator_pose_following

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7441fb16c8bfa712d0c5cc7be6c7882";
  }

  static const char* value(const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7441fb16c8bfa71ULL;
  static const uint64_t static_value2 = 0x2d0c5cc7be6c7882ULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulator_pose_following/InitPointResponse";
  }

  static const char* value(const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 transfer_state\n"
;
  }

  static const char* value(const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transfer_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InitPointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulator_pose_following::InitPointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulator_pose_following::InitPointResponse_<ContainerAllocator>& v)
  {
    s << indent << "transfer_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transfer_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATOR_POSE_FOLLOWING_MESSAGE_INITPOINTRESPONSE_H

// Generated by gencpp from file path_control/ControllMsg.msg
// DO NOT EDIT!


#ifndef PATH_CONTROL_MESSAGE_CONTROLLMSG_H
#define PATH_CONTROL_MESSAGE_CONTROLLMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_control
{
template <class ContainerAllocator>
struct ControllMsg_
{
  typedef ControllMsg_<ContainerAllocator> Type;

  ControllMsg_()
    : positions()
    , velocities()
    , dt(0.0)
    , is_trusted_msg(false)  {
    }
  ControllMsg_(const ContainerAllocator& _alloc)
    : positions(_alloc)
    , velocities(_alloc)
    , dt(0.0)
    , is_trusted_msg(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _positions_type;
  _positions_type positions;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _velocities_type;
  _velocities_type velocities;

   typedef double _dt_type;
  _dt_type dt;

   typedef uint8_t _is_trusted_msg_type;
  _is_trusted_msg_type is_trusted_msg;





  typedef boost::shared_ptr< ::path_control::ControllMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_control::ControllMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ControllMsg_

typedef ::path_control::ControllMsg_<std::allocator<void> > ControllMsg;

typedef boost::shared_ptr< ::path_control::ControllMsg > ControllMsgPtr;
typedef boost::shared_ptr< ::path_control::ControllMsg const> ControllMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_control::ControllMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_control::ControllMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_control::ControllMsg_<ContainerAllocator1> & lhs, const ::path_control::ControllMsg_<ContainerAllocator2> & rhs)
{
  return lhs.positions == rhs.positions &&
    lhs.velocities == rhs.velocities &&
    lhs.dt == rhs.dt &&
    lhs.is_trusted_msg == rhs.is_trusted_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_control::ControllMsg_<ContainerAllocator1> & lhs, const ::path_control::ControllMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_control::ControllMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_control::ControllMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_control::ControllMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_control::ControllMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_control::ControllMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_control::ControllMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_control::ControllMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98ada26a4817920a2d40c6220f1d0fd9";
  }

  static const char* value(const ::path_control::ControllMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98ada26a4817920aULL;
  static const uint64_t static_value2 = 0x2d40c6220f1d0fd9ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_control::ControllMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_control/ControllMsg";
  }

  static const char* value(const ::path_control::ControllMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_control::ControllMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] positions\n"
"float64[] velocities\n"
"float64 dt\n"
"bool is_trusted_msg\n"
;
  }

  static const char* value(const ::path_control::ControllMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_control::ControllMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.positions);
      stream.next(m.velocities);
      stream.next(m.dt);
      stream.next(m.is_trusted_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_control::ControllMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_control::ControllMsg_<ContainerAllocator>& v)
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocities[i]);
    }
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "is_trusted_msg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_trusted_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_CONTROL_MESSAGE_CONTROLLMSG_H
